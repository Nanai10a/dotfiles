# this configuration was edited from default configuration
# exported default configuration from `starsnip print-config` on
# no config specified environment

# $all is shorthand for $username$hostname$localip$shlvl$singularity$kubernetes$directory$vcsh$git_branch$git_commit$git_state$git_metrics$git_status$hg_branch$docker_context$package$cmake$cobol$dart$deno$dotnet$elixir$elm$erlang$golang$helm$java$julia$kotlin$lua$nim$nodejs$ocaml$perl$php$pulumi$purescript$python$rlang$red$ruby$rust$scala$swift$terraform$vlang$vagrant$zig$nix_shell$conda$memory_usage$aws$gcloud$openstack$azure$env_var$crystal$custom$sudo$cmd_duration$line_break$jobs$battery$time$status$container$shell$character
format = '$all'
right_format = ''
continuation_prompt = '[>](bright-black) '
scan_timeout = 30
command_timeout = 500
add_newline = true

[aws]
disabled = true

[azure]
disabled = true

[battery]
disabled = true

[character]
format = '$symbol '
success_symbol = '[>](bold green)'
error_symbol = '[>](bold red)'
vicmd_symbol = '[<](bold green)'
disabled = false

[cmake]
format = 'using [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'CMake '
style = 'bold blue'
disabled = false
detect_extensions = []
detect_files = [
    'CMakeLists.txt',
    'CMakeCache.txt',
]
detect_folders = []

[cmd_duration]
min_time = 0
format = 'took [$duration]($style) '
style = 'yellow bold'
show_milliseconds = true
disabled = false
show_notifications = false

[cobol]
disabled = true

[conda]
disabled = true

[container]
disabled = true

[crystal]
disabled = true

[dart]
disabled = true

[deno]
format = 'using [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'Deno '
style = 'green bold'
disabled = false
detect_extensions = []
detect_files = [
    'deno.json',
    'deno.jsonc',
    'mod.ts',
    'deps.ts',
    'mod.js',
    'deps.js',
]
detect_folders = []

[directory]
truncation_length = 3
truncate_to_repo = true
fish_style_pwd_dir_length = 0
use_logical_path = true
format = '[$path]($style)[$read_only]($read_only_style) '
repo_root_format = '[$before_root_path]($style)[$repo_root]($repo_root_style)[$path]($style)[$read_only]($read_only_style) '
style = 'cyan bold'
disabled = false
read_only = ' [-w]'
read_only_style = 'red'
truncation_symbol = ''
home_symbol = '~'
use_os_path_sep = true

[directory.substitutions]

[docker_context]
symbol = 'Docker '
style = 'blue bold'
format = 'in [$symbol$context]($style) '
only_with_files = true
disabled = false
detect_extensions = []
detect_files = [
    'docker-compose.yml',
    'docker-compose.yaml',
    'Dockerfile',
]
detect_folders = []

[dotnet]
format = 'using [$symbol($version )(\(targeting $tfm\) )]($style)'
version_format = 'v${raw}'
symbol = '.NET '
style = 'blue bold'
heuristic = true
disabled = false
detect_extensions = [
    'csproj',
    'fsproj',
    'xproj',
]
detect_files = [
    'global.json',
    'project.json',
    'Directory.Build.props',
    'Directory.Build.targets',
    'Packages.props',
]
detect_folders = []

[elixir]
disabled = true

[elm]
disabled = true

[env_var]

[erlang]
disabled = true

[fill]
style = 'bold black'
symbol = '.'
disabled = false

[gcloud]
disabled = true

[gcloud.region_aliases]

[git_branch]
format = 'on [$symbol$branch]($style)(:[$remote]($style)) '
symbol = 'tree/'
style = 'bold purple'
truncation_length = 9223372036854775807
truncation_symbol = ''
only_attached = false
always_show_remote = false
disabled = false

[git_commit]
commit_hash_length = 7
format = '[\($hash$tag\)]($style) '
style = 'green bold'
only_detached = true
disabled = false
tag_symbol = 'tag: '
tag_disabled = false

[git_metrics]
added_style = 'bold green'
deleted_style = 'bold red'
only_nonzero_diffs = true
format = '([+$added]($added_style) )([-$deleted]($deleted_style) )'
disabled = false

[git_state]
rebase = 'REBASING'
merge = 'MERGING'
revert = 'REVERTING'
cherry_pick = 'CHERRY-PICKING'
bisect = 'BISECTING'
am = 'AM'
am_or_rebase = 'AM/REBASE'
style = 'bold yellow'
format = '\([$state( $progress_current/$progress_total)]($style)\) '
disabled = false

[git_status]
format = '([\[$all_status$ahead_behind\]]($style) )'
style = 'red bold'
stashed = '\$'
ahead = '^'
behind = 'v'
up_to_date = ''
diverged = '*'
conflicted = '='
deleted = 'x'
renamed = '>'
modified = '!'
staged = '+'
untracked = '?'
ignore_submodules = false
disabled = false

[golang]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
symbol = '.go'
style = 'bold cyan'
disabled = false
detect_extensions = ['go']
detect_files = [
    'go.mod',
    'go.sum',
    'glide.yaml',
    'Gopkg.yml',
    'Gopkg.lock',
    '.go-version',
]
detect_folders = ['Godeps']

[helm]
disabled = true

[hg_branch]
disabled = true

[hostname]
ssh_only = true
trim_at = '.'
format = '[$hostname]($style) in '
style = 'green dimmed bold'
disabled = false

[java]
disabled = false
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
style = 'red'
symbol = '.java'
detect_extensions = [
    'java',
    'class',
    'jar',
    'gradle',
    'clj',
    'cljc',
]
detect_files = [
    'pom.xml',
    'build.gradle.kts',
    'build.sbt',
    '.java-version',
    'deps.edn',
    'project.clj',
    'build.boot',
]
detect_folders = []

[jobs]
threshold = 1
symbol_threshold = 1
number_threshold = 2
format = '[$symbol$number]($style) '
symbol = '&'
style = 'bold blue'
disabled = false

[julia]
disabled = true

[kotlin]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
symbol = '.kt'
style = 'bold blue'
# customized version to do caching version output of kotlin's cli tool because its outputting time is too long
kotlin_binary = 'kotlinv'
disabled = false
detect_extensions = [
    'kt',
    'kts',
]
detect_files = []
detect_folders = []

[kubernetes]
disabled = true

[kubernetes.context_aliases]

[line_break]
disabled = false

[localip]
disabled = true

[lua]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
symbol = '.lua'
style = 'bold blue'
lua_binary = 'lua'
disabled = false
detect_extensions = ['lua']
detect_files = ['.lua-version']
detect_folders = ['lua']

[memory_usage]
disabled = true

[nim]
disabled = true

[nix_shell]
disabled = true

[nodejs]
format = 'using [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'Node.js '
style = 'bold green'
disabled = false
not_capable_style = 'bold red'
detect_extensions = [
    'js',
    'mjs',
    'cjs',
    'ts',
]
detect_files = [
    'package.json',
    '.node-version',
    '.nvmrc',
]
detect_folders = ['node_modules']

[ocaml]
disabled = true

[openstack]
disabled = true

[package]
format = 'is [$symbol$version]($style) '
symbol = ''
style = '208 bold'
display_private = false
disabled = false
version_format = 'v${raw}'

[perl]
disabled = true

[php]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
symbol = '.php'
style = '147 bold'
disabled = false
detect_extensions = ['php']
detect_files = [
    'composer.json',
    '.php-version',
]
detect_folders = []

[pulumi]
disabled = true

[purescript]
disabled = true

[python]
pyenv_version_name = false
pyenv_prefix = 'pyenv '
python_binary = [
    'python',
    'python3',
    'python2',
]
format = '[${pyenv_prefix}(${version}${symbol} )(\($virtualenv\) )]($style)'
version_format = 'v${raw}'
style = 'yellow bold'
symbol = '.py'
disabled = false
detect_extensions = ['py']
detect_files = [
    'requirements.txt',
    '.python-version',
    'pyproject.toml',
    'Pipfile',
    'tox.ini',
    'setup.py',
    '__init__.py',
]
detect_folders = []

[red]
disabled = true

[rlang]
disabled = true

[ruby]
disabled = true

[rust]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
symbol = '.rs'
style = 'bold red'
disabled = false
detect_extensions = ['rs']
detect_files = ['Cargo.toml']
detect_folders = []

[scala]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
disabled = false
style = 'red bold'
symbol = '.scala'
detect_extensions = [
    'sbt',
    'scala',
]
detect_files = [
    '.scalaenv',
    '.sbtenv',
    'build.sbt',
]
detect_folders = ['.metals']

[shell]
disabled = true

[shlvl]
disabled = true

[singularity]
disabled = true

[status]
format = '\([$status]($style)\) '
style = 'bold red'
map_symbol = false
recognize_signal_code = true
pipestatus = false
disabled = false

[sudo]
disabled = true

[swift]
disabled = true

[terraform]
disabled = true

[time]
disabled = true

[username]
format = '[$user]($style) in '
style_root = 'red bold'
style_user = 'yellow bold'
show_always = false
disabled = false

[vagrant]
disabled = true

[vcsh]
disabled = true

[vlang]
format = '[($version$symbol )]($style)'
version_format = 'v${raw}'
symbol = '.v'
style = 'blue bold'
disabled = false
detect_extensions = ['v']
detect_files = [
    'v.mod',
    'vpkg.json',
    '.vpkg-lock.json',
]
detect_folders = []

[zig]
disabled = true

[custom]
